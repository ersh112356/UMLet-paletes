<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>Text</id>
    <coordinates>
      <x>20</x>
      <y>20</y>
      <w>100</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Cassandra*
halign=center
customelement=
// Text Elemnt
// DB Symbol
drawArc(0,0,width,height*2/5,0,180,true) fg=black bg=#cc0066 //Parameters (x, y, width, height, start, extent, open)
drawArc(0,0,width,height*2/5,180,180,true) fg=black //Parameters (x, y, width, height, start, extent, open)
drawRectangle(0,(height+0.5)/5,width,(height)*3/5-1) fg=black bg=#cc0066 //Parameters (x, y, width, height)
drawLine(0,height/5,0,height*4/5)fg=black //Parameters (x1, y1, x2, y2) 
drawLine(width,height/5,width,height*4/5)fg=black //Parameters (x1, y1, x2, y2) 
drawArc(0,height*1/5,width,height*2/5,180,180,true) fg=black //Parameters (x, y, width, height, start, extent, open)
drawArc(0,height*2/5,width,height*2/5,180,180,true) fg=black //Parameters (x, y, width, height, start, extent, open)
drawArc(0,height*3/5,width,height*2/5,180,180,true) fg=black bg=#cc0066 //Parameters (x, y, width, height, start, extent, open)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>30</x>
      <y>90</y>
      <w>30</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=..
lw=5.0
</panel_attributes>
    <additional_attributes>10.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>20</x>
      <y>90</y>
      <w>30</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=..
lw=5.0
</panel_attributes>
    <additional_attributes>10.0;200.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>110</y>
      <w>240</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
lw=3.0
fg=#9999ee</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>100</x>
      <y>130</y>
      <w>240</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-
lw=3.0
fg=#9999ee</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>140</x>
      <y>20</y>
      <w>100</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>*Cassandra*
halign=center
customelement=
// Text Elemnt
// DB Symbol
drawArc(0,0,width,height*2/5,0,180,true) fg=black bg=#666666 //Parameters (x, y, width, height, start, extent, open)
drawArc(0,0,width,height*2/5,180,180,true) fg=black //Parameters (x, y, width, height, start, extent, open)
drawRectangle(0,(height+0.5)/5,width,(height)*3/5-1) fg=black bg=#666666 //Parameters (x, y, width, height)
drawLine(0,height/5,0,height*4/5)fg=black //Parameters (x1, y1, x2, y2) 
drawLine(width,height/5,width,height*4/5)fg=black //Parameters (x1, y1, x2, y2) 
drawArc(0,height*1/5,width,height*2/5,180,180,true) fg=black //Parameters (x, y, width, height, start, extent, open)
drawArc(0,height*2/5,width,height*2/5,180,180,true) fg=black //Parameters (x, y, width, height, start, extent, open)
drawArc(0,height*3/5,width,height*2/5,180,180,true) fg=black bg=#666666 //Parameters (x, y, width, height, start, extent, open)
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>70</x>
      <y>100</y>
      <w>140</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;..&gt;
request/response</panel_attributes>
    <additional_attributes>10.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>190</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>MS
bg=#ffcc00</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>220</x>
      <y>190</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>API
bg=#999900</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>240</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Digital HUB
bg=#0066ff</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>110</x>
      <y>290</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>REST
fontsize=12
bg=#009999</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>220</x>
      <y>240</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Qaurtz
bg=#cc0066</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>250</x>
      <y>10</y>
      <w>80</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>Customer
bg=#666699
fg=#666699</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>30</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>

group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>10</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>_*Web*_
valign=center
bg=#6699ff
group=1</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>30</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>10</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>_*Web*_
valign=center
bg=#ffcc99</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>180</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>160</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>_*Web*_
valign=center
bg=#cccc99</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>180</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>400</x>
      <y>160</y>
      <w>60</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>_*Web*_
valign=center
bg=#ffcccc</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>30</x>
      <y>320</y>
      <w>21</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>// That takes effect globaly.
// That must come first. 
gradient=ltr
//gradient=btt
gradient=true
// Those settings are at the sentence level.
valign=center
fontsize=14
*Web*
bg=#999900

group=3</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.
try
{	 // Make this center in reference to the font size (14).
    int x = 14+(width-14)/2-2;

    // (1) Try to find global parameters such as, font size, etc.
    double fsize = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFontSize();
    boolean fflag = false;
    boolean calign = false;
    boolean ltr = true;
    boolean ttb = true;
    boolean frame = true;
    int newFSize = 14;

    for(String textline : textlines)
    {
       String substring = textline;
       int y = 10;
       char c1;
       boolean gbflag = false;
       boolean giflag = false;
       boolean guflag = false;

       if(substring.startsWith("fontsize="))
       {
            substring = substring.substring("fontsize=".length(),substring.length());

            try
            {
                newFSize = Integer.parseInt(substring.trim());
            }
            catch(NumberFormatException ex)
            {
                newFSize = (int)fsize;
            }

            com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize((double)newFSize);
            fflag = true;

            continue;
       }
       else if(substring.startsWith("valign=center"))
       {
           calign = true;

           continue;
       }
       else if(substring.startsWith("gradient=rtl"))
       {
           ltr = false;
                   
           continue;
       }
       else if(substring.startsWith("gradient=btt"))
       {
           ttb = false;

           continue;
       }
       else if(substring.startsWith("gradient=true"))
       {    // Takes effect, globaly.
            int x1 =0, x2 = width, y1 = 0,y2 = height;
            
            if(ltr)
            {
            	 x1 = width;
                x2 = 0;
                y1 = 0;
                y2 = 0;
            }
            else
            {
            	 x1 = 0;
                x2 = width;
                y1 = 0;
                y2 = 0;
            }
            
            if(!ttb)
            {
            	 x1 = width;
            	 x2 = width;
                y1 = height;
                y2 = 0;
            }

				int xstart = frame ? 1 : 0;
				int ystart = frame ? 1 : 0;
            int twidth = frame ? width-1 : width;
            int theight = frame ? height-1 : height;
            
            GradientPaint gradient = new GradientPaint(x1,y1,bgColor.brighter(),x2,y2,bgColor);
            g2.draw(new Rectangle(0,0,width,height));
            g2.setPaint(gradient);
            g2.fill(new java.awt.geom.Rectangle2D.Double(xstart,ystart,twidth,theight));
            g2.setColor(fgColor);

            continue;
       }
       else if(substring.startsWith("gradient=false"))
       {
       		drawRectangle(0,0,width,height);

       		continue;
       }
       else if(substring.startsWith("frame=false"))
       {
       		frame = false;
       }

       if(fflag)
       {    // The next sentence after Bumping into changing of a font size.
       	   // Make this center in reference to the new font size. 
            x = newFSize+(width-newFSize)/2-2;
            fflag = false;
       }
       
       if(calign)
       {	  // The next sentence after Bumping into align setting. 
           int w = textWidth(substring,true);
           y = (height-w)/2-height;
           calign = false;
       }

        while(!substring.isEmpty() &amp;&amp; ((c1=substring.charAt(0))=='*' || c1=='/' || c1=='_') &amp;&amp; substring.charAt(substring.length()-1)==c1 &amp;&amp; ((substring.length() - substring.replace(c1+"","").length())==2))
        {   // (2) Find all global parameters of a line, such as, bold, italic, and an underline.
            // That will break if one of the word contains one of '*'; or '/'; or '_'.
           substring = substring.substring(1,substring.length()-1);

           switch(c1)
           {
               case '*':
               {
                    gbflag = true;

                    break;
               }
               case '/':
               {
                    giflag = true;

                    break;
               }
               case '_':
               {
                   guflag = true;

                   break;
               }
           }
        }

        String[] subs = substring.split(" ");

        for(int i=0;i&lt;subs.length;i++)    
        {
            String sub = subs[i];

            char lc1;
            boolean lbflag = false;
            boolean liflag = false;
            boolean luflag = false;

            while(!sub.isEmpty() &amp;&amp; ((lc1=sub.charAt(0))=='*' || lc1=='/' || lc1=='_') &amp;&amp; sub.charAt(sub.length()-1)==lc1)
            {
                sub = sub.substring(1,sub.length()-1);

                switch(lc1)
                {
                    case '*':
                    {
                        lbflag = true;

                        break;
                    }
                    case '/':
                    {
                        liflag = true;

                        break;
                    }
                    case '_':
                    {
                        luflag = true;

                        break;
                    }
                }
            }
            
            if(!sub.trim().isEmpty())
            {   // No need to print empty words.
                java.awt.geom.AffineTransform old = g2.getTransform();
                String name = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFont().getFontName();
                int style = lbflag || gbflag ? Font.BOLD : Font.PLAIN;
                style = liflag || giflag ? style | Font.ITALIC : style;
                style = luflag || guflag ? style | java.awt.font.TextAttribute.UNDERLINE_ON : style;
                Font nfont = new Font(name,style,(int)newFSize);
                g2.setFont(nfont);
                g2.rotate(Math.toRadians(270));
                g2.drawString(sub,(int)(y*zoom),(int)(x*zoom));
                
                // Reset.
                g2.setTransform(old);
                y += textWidth(sub,true);
            }

            if(i&lt;subs.length-1)
            {   // Move the cusrsor one space right.
                y += textWidth(" ",true);
            }           
        }

        x += printLeft("",y);
        com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize(fsize);
    }
}
catch(Exception e)
{}</custom_code>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>50</x>
      <y>320</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>

group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>130</x>
      <y>320</y>
      <w>21</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>// That takes effect globaly.
// That must come first. 
gradient=ltr
//gradient=btt
gradient=true
// Those settings are at the sentence level.
valign=center
fontsize=14
*Web*
bg=#ffcccc

group=2</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.
try
{	 // Make this center in reference to the font size (14).
    int x = 14+(width-14)/2-2;

    // (1) Try to find global parameters such as, font size, etc.
    double fsize = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFontSize();
    boolean fflag = false;
    boolean calign = false;
    boolean ltr = true;
    boolean ttb = true;
    boolean frame = true;
    int newFSize = 14;

    for(String textline : textlines)
    {
       String substring = textline;
       int y = 10;
       char c1;
       boolean gbflag = false;
       boolean giflag = false;
       boolean guflag = false;

       if(substring.startsWith("fontsize="))
       {
            substring = substring.substring("fontsize=".length(),substring.length());

            try
            {
                newFSize = Integer.parseInt(substring.trim());
            }
            catch(NumberFormatException ex)
            {
                newFSize = (int)fsize;
            }

            com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize((double)newFSize);
            fflag = true;

            continue;
       }
       else if(substring.startsWith("valign=center"))
       {
           calign = true;

           continue;
       }
       else if(substring.startsWith("gradient=rtl"))
       {
           ltr = false;
                   
           continue;
       }
       else if(substring.startsWith("gradient=btt"))
       {
           ttb = false;

           continue;
       }
       else if(substring.startsWith("gradient=true"))
       {    // Takes effect, globaly.
            int x1 =0, x2 = width, y1 = 0,y2 = height;
            
            if(ltr)
            {
            	 x1 = width;
                x2 = 0;
                y1 = 0;
                y2 = 0;
            }
            else
            {
            	 x1 = 0;
                x2 = width;
                y1 = 0;
                y2 = 0;
            }
            
            if(!ttb)
            {
            	 x1 = width;
            	 x2 = width;
                y1 = height;
                y2 = 0;
            }

				int xstart = frame ? 1 : 0;
				int ystart = frame ? 1 : 0;
            int twidth = frame ? width-1 : width;
            int theight = frame ? height-1 : height;
            
            GradientPaint gradient = new GradientPaint(x1,y1,bgColor.brighter(),x2,y2,bgColor);
            g2.draw(new Rectangle(0,0,width,height));
            g2.setPaint(gradient);
            g2.fill(new java.awt.geom.Rectangle2D.Double(xstart,ystart,twidth,theight));
            g2.setColor(fgColor);

            continue;
       }
       else if(substring.startsWith("gradient=false"))
       {
       		drawRectangle(0,0,width,height);

       		continue;
       }
       else if(substring.startsWith("frame=false"))
       {
       		frame = false;
       }

       if(fflag)
       {    // The next sentence after Bumping into changing of a font size.
       	   // Make this center in reference to the new font size. 
            x = newFSize+(width-newFSize)/2-2;
            fflag = false;
       }
       
       if(calign)
       {	  // The next sentence after Bumping into align setting. 
           int w = textWidth(substring,true);
           y = (height-w)/2-height;
           calign = false;
       }

        while(!substring.isEmpty() &amp;&amp; ((c1=substring.charAt(0))=='*' || c1=='/' || c1=='_') &amp;&amp; substring.charAt(substring.length()-1)==c1 &amp;&amp; ((substring.length() - substring.replace(c1+"","").length())==2))
        {   // (2) Find all global parameters of a line, such as, bold, italic, and an underline.
            // That will break if one of the word contains one of '*'; or '/'; or '_'.
           substring = substring.substring(1,substring.length()-1);

           switch(c1)
           {
               case '*':
               {
                    gbflag = true;

                    break;
               }
               case '/':
               {
                    giflag = true;

                    break;
               }
               case '_':
               {
                   guflag = true;

                   break;
               }
           }
        }

        String[] subs = substring.split(" ");

        for(int i=0;i&lt;subs.length;i++)    
        {
            String sub = subs[i];

            char lc1;
            boolean lbflag = false;
            boolean liflag = false;
            boolean luflag = false;

            while(!sub.isEmpty() &amp;&amp; ((lc1=sub.charAt(0))=='*' || lc1=='/' || lc1=='_') &amp;&amp; sub.charAt(sub.length()-1)==lc1)
            {
                sub = sub.substring(1,sub.length()-1);

                switch(lc1)
                {
                    case '*':
                    {
                        lbflag = true;

                        break;
                    }
                    case '/':
                    {
                        liflag = true;

                        break;
                    }
                    case '_':
                    {
                        luflag = true;

                        break;
                    }
                }
            }
            
            if(!sub.trim().isEmpty())
            {   // No need to print empty words.
                java.awt.geom.AffineTransform old = g2.getTransform();
                String name = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFont().getFontName();
                int style = lbflag || gbflag ? Font.BOLD : Font.PLAIN;
                style = liflag || giflag ? style | Font.ITALIC : style;
                style = luflag || guflag ? style | java.awt.font.TextAttribute.UNDERLINE_ON : style;
                Font nfont = new Font(name,style,(int)newFSize);
                g2.setFont(nfont);
                g2.rotate(Math.toRadians(270));
                g2.drawString(sub,(int)(y*zoom),(int)(x*zoom));
                
                // Reset.
                g2.setTransform(old);
                y += textWidth(sub,true);
            }

            if(i&lt;subs.length-1)
            {   // Move the cusrsor one space right.
                y += textWidth(" ",true);
            }           
        }

        x += printLeft("",y);
        com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize(fsize);
    }
}
catch(Exception e)
{}</custom_code>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>320</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>

group=2</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>230</x>
      <y>320</y>
      <w>21</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>// That takes effect globaly.
// That must come first. 
gradient=ltr
//gradient=btt
gradient=true
// Those settings are at the sentence level.
valign=center
fontsize=14
*Web*
bg=#6699ff

group=4</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.
try
{	 // Make this center in reference to the font size (14).
    int x = 14+(width-14)/2-2;

    // (1) Try to find global parameters such as, font size, etc.
    double fsize = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFontSize();
    boolean fflag = false;
    boolean calign = false;
    boolean ltr = true;
    boolean ttb = true;
    boolean frame = true;
    int newFSize = 14;

    for(String textline : textlines)
    {
       String substring = textline;
       int y = 10;
       char c1;
       boolean gbflag = false;
       boolean giflag = false;
       boolean guflag = false;

       if(substring.startsWith("fontsize="))
       {
            substring = substring.substring("fontsize=".length(),substring.length());

            try
            {
                newFSize = Integer.parseInt(substring.trim());
            }
            catch(NumberFormatException ex)
            {
                newFSize = (int)fsize;
            }

            com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize((double)newFSize);
            fflag = true;

            continue;
       }
       else if(substring.startsWith("valign=center"))
       {
           calign = true;

           continue;
       }
       else if(substring.startsWith("gradient=rtl"))
       {
           ltr = false;
                   
           continue;
       }
       else if(substring.startsWith("gradient=btt"))
       {
           ttb = false;

           continue;
       }
       else if(substring.startsWith("gradient=true"))
       {    // Takes effect, globaly.
            int x1 =0, x2 = width, y1 = 0,y2 = height;
            
            if(ltr)
            {
            	 x1 = width;
                x2 = 0;
                y1 = 0;
                y2 = 0;
            }
            else
            {
            	 x1 = 0;
                x2 = width;
                y1 = 0;
                y2 = 0;
            }
            
            if(!ttb)
            {
            	 x1 = width;
            	 x2 = width;
                y1 = height;
                y2 = 0;
            }

				int xstart = frame ? 1 : 0;
				int ystart = frame ? 1 : 0;
            int twidth = frame ? width-1 : width;
            int theight = frame ? height-1 : height;
            
            GradientPaint gradient = new GradientPaint(x1,y1,bgColor.brighter(),x2,y2,bgColor);
            g2.draw(new Rectangle(0,0,width,height));
            g2.setPaint(gradient);
            g2.fill(new java.awt.geom.Rectangle2D.Double(xstart,ystart,twidth,theight));
            g2.setColor(fgColor);

            continue;
       }
       else if(substring.startsWith("gradient=false"))
       {
       		drawRectangle(0,0,width,height);

       		continue;
       }
       else if(substring.startsWith("frame=false"))
       {
       		frame = false;
       }

       if(fflag)
       {    // The next sentence after Bumping into changing of a font size.
       	   // Make this center in reference to the new font size. 
            x = newFSize+(width-newFSize)/2-2;
            fflag = false;
       }
       
       if(calign)
       {	  // The next sentence after Bumping into align setting. 
           int w = textWidth(substring,true);
           y = (height-w)/2-height;
           calign = false;
       }

        while(!substring.isEmpty() &amp;&amp; ((c1=substring.charAt(0))=='*' || c1=='/' || c1=='_') &amp;&amp; substring.charAt(substring.length()-1)==c1 &amp;&amp; ((substring.length() - substring.replace(c1+"","").length())==2))
        {   // (2) Find all global parameters of a line, such as, bold, italic, and an underline.
            // That will break if one of the word contains one of '*'; or '/'; or '_'.
           substring = substring.substring(1,substring.length()-1);

           switch(c1)
           {
               case '*':
               {
                    gbflag = true;

                    break;
               }
               case '/':
               {
                    giflag = true;

                    break;
               }
               case '_':
               {
                   guflag = true;

                   break;
               }
           }
        }

        String[] subs = substring.split(" ");

        for(int i=0;i&lt;subs.length;i++)    
        {
            String sub = subs[i];

            char lc1;
            boolean lbflag = false;
            boolean liflag = false;
            boolean luflag = false;

            while(!sub.isEmpty() &amp;&amp; ((lc1=sub.charAt(0))=='*' || lc1=='/' || lc1=='_') &amp;&amp; sub.charAt(sub.length()-1)==lc1)
            {
                sub = sub.substring(1,sub.length()-1);

                switch(lc1)
                {
                    case '*':
                    {
                        lbflag = true;

                        break;
                    }
                    case '/':
                    {
                        liflag = true;

                        break;
                    }
                    case '_':
                    {
                        luflag = true;

                        break;
                    }
                }
            }
            
            if(!sub.trim().isEmpty())
            {   // No need to print empty words.
                java.awt.geom.AffineTransform old = g2.getTransform();
                String name = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFont().getFontName();
                int style = lbflag || gbflag ? Font.BOLD : Font.PLAIN;
                style = liflag || giflag ? style | Font.ITALIC : style;
                style = luflag || guflag ? style | java.awt.font.TextAttribute.UNDERLINE_ON : style;
                Font nfont = new Font(name,style,(int)newFSize);
                g2.setFont(nfont);
                g2.rotate(Math.toRadians(270));
                g2.drawString(sub,(int)(y*zoom),(int)(x*zoom));
                
                // Reset.
                g2.setTransform(old);
                y += textWidth(sub,true);
            }

            if(i&lt;subs.length-1)
            {   // Move the cusrsor one space right.
                y += textWidth(" ",true);
            }           
        }

        x += printLeft("",y);
        com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize(fsize);
    }
}
catch(Exception e)
{}</custom_code>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>250</x>
      <y>320</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>

group=4</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>330</x>
      <y>320</y>
      <w>21</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>// That takes effect globaly.
// That must come first. 
gradient=ltr
//gradient=btt
gradient=true
// Those settings are at the sentence level.
valign=center
fontsize=14
*Web*
bg=#ffcc99

group=5</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.
try
{	 // Make this center in reference to the font size (14).
    int x = 14+(width-14)/2-2;

    // (1) Try to find global parameters such as, font size, etc.
    double fsize = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFontSize();
    boolean fflag = false;
    boolean calign = false;
    boolean ltr = true;
    boolean ttb = true;
    boolean frame = true;
    int newFSize = 14;

    for(String textline : textlines)
    {
       String substring = textline;
       int y = 10;
       char c1;
       boolean gbflag = false;
       boolean giflag = false;
       boolean guflag = false;

       if(substring.startsWith("fontsize="))
       {
            substring = substring.substring("fontsize=".length(),substring.length());

            try
            {
                newFSize = Integer.parseInt(substring.trim());
            }
            catch(NumberFormatException ex)
            {
                newFSize = (int)fsize;
            }

            com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize((double)newFSize);
            fflag = true;

            continue;
       }
       else if(substring.startsWith("valign=center"))
       {
           calign = true;

           continue;
       }
       else if(substring.startsWith("gradient=rtl"))
       {
           ltr = false;
                   
           continue;
       }
       else if(substring.startsWith("gradient=btt"))
       {
           ttb = false;

           continue;
       }
       else if(substring.startsWith("gradient=true"))
       {    // Takes effect, globaly.
            int x1 =0, x2 = width, y1 = 0,y2 = height;
            
            if(ltr)
            {
            	 x1 = width;
                x2 = 0;
                y1 = 0;
                y2 = 0;
            }
            else
            {
            	 x1 = 0;
                x2 = width;
                y1 = 0;
                y2 = 0;
            }
            
            if(!ttb)
            {
            	 x1 = width;
            	 x2 = width;
                y1 = height;
                y2 = 0;
            }

				int xstart = frame ? 1 : 0;
				int ystart = frame ? 1 : 0;
            int twidth = frame ? width-1 : width;
            int theight = frame ? height-1 : height;
            
            GradientPaint gradient = new GradientPaint(x1,y1,bgColor.brighter(),x2,y2,bgColor);
            g2.draw(new Rectangle(0,0,width,height));
            g2.setPaint(gradient);
            g2.fill(new java.awt.geom.Rectangle2D.Double(xstart,ystart,twidth,theight));
            g2.setColor(fgColor);

            continue;
       }
       else if(substring.startsWith("gradient=false"))
       {
       		drawRectangle(0,0,width,height);

       		continue;
       }
       else if(substring.startsWith("frame=false"))
       {
       		frame = false;
       }

       if(fflag)
       {    // The next sentence after Bumping into changing of a font size.
       	   // Make this center in reference to the new font size. 
            x = newFSize+(width-newFSize)/2-2;
            fflag = false;
       }
       
       if(calign)
       {	  // The next sentence after Bumping into align setting. 
           int w = textWidth(substring,true);
           y = (height-w)/2-height;
           calign = false;
       }

        while(!substring.isEmpty() &amp;&amp; ((c1=substring.charAt(0))=='*' || c1=='/' || c1=='_') &amp;&amp; substring.charAt(substring.length()-1)==c1 &amp;&amp; ((substring.length() - substring.replace(c1+"","").length())==2))
        {   // (2) Find all global parameters of a line, such as, bold, italic, and an underline.
            // That will break if one of the word contains one of '*'; or '/'; or '_'.
           substring = substring.substring(1,substring.length()-1);

           switch(c1)
           {
               case '*':
               {
                    gbflag = true;

                    break;
               }
               case '/':
               {
                    giflag = true;

                    break;
               }
               case '_':
               {
                   guflag = true;

                   break;
               }
           }
        }

        String[] subs = substring.split(" ");

        for(int i=0;i&lt;subs.length;i++)    
        {
            String sub = subs[i];

            char lc1;
            boolean lbflag = false;
            boolean liflag = false;
            boolean luflag = false;

            while(!sub.isEmpty() &amp;&amp; ((lc1=sub.charAt(0))=='*' || lc1=='/' || lc1=='_') &amp;&amp; sub.charAt(sub.length()-1)==lc1)
            {
                sub = sub.substring(1,sub.length()-1);

                switch(lc1)
                {
                    case '*':
                    {
                        lbflag = true;

                        break;
                    }
                    case '/':
                    {
                        liflag = true;

                        break;
                    }
                    case '_':
                    {
                        luflag = true;

                        break;
                    }
                }
            }
            
            if(!sub.trim().isEmpty())
            {   // No need to print empty words.
                java.awt.geom.AffineTransform old = g2.getTransform();
                String name = com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().getFont().getFontName();
                int style = lbflag || gbflag ? Font.BOLD : Font.PLAIN;
                style = liflag || giflag ? style | Font.ITALIC : style;
                style = luflag || guflag ? style | java.awt.font.TextAttribute.UNDERLINE_ON : style;
                Font nfont = new Font(name,style,(int)newFSize);
                g2.setFont(nfont);
                g2.rotate(Math.toRadians(270));
                g2.drawString(sub,(int)(y*zoom),(int)(x*zoom));
                
                // Reset.
                g2.setTransform(old);
                y += textWidth(sub,true);
            }

            if(i&lt;subs.length-1)
            {   // Move the cusrsor one space right.
                y += textWidth(" ",true);
            }           
        }

        x += printLeft("",y);
        com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFontHandler().setFontSize(fsize);
    }
}
catch(Exception e)
{}</custom_code>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>320</y>
      <w>60</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>

group=5</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
