<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>10</x>
      <y>20</y>
      <w>121</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>// The name of the image file.
// The needs to be palced relative to the diagram.
// Parent forder needs to be avoided, as it's 
// should be the same as the diagram itself.
image=umlet_logo.png
// If avoided, or frame=false, the frame os removed.
frame=true</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

try
{
    for(String textline : textlines)
    {
        if(textline.startsWith("image="))
        {
        	  try
        	  {
        	     String path = new java.io.File(com.baselet.control.HandlerElementMap.getHandlerForElement(this).getFileHandler().getFullPathName()).getParent();
              String name = textline.substring("image=".length(),textline.length());
              java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(new java.io.File(path+java.io.File.separatorChar+name));
              g2.drawImage(image,0,0,width,height,null);
        	  }
        	  catch(Exception ex)
        	  {
        	  	   int y = textHeight();
        	  	   printCenter("Image can't be loaded.",y);
        	  }
           
           continue;
        }
        else if(textline.startsWith("frame=true"))
        {
            drawRectangle(0,0,width,height);
            
            continue;
        }
    }
}
catch(Exception e)
{
}</custom_code>
  </element>
  <element>
    <type>CustomElementImpl</type>
    <coordinates>
      <x>140</x>
      <y>20</y>
      <w>121</w>
      <h>121</h>
    </coordinates>
    <panel_attributes>// If avoided, or frame=false, the frame os removed.
frame=true
// To upload a new image, delete the below.

base64=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
base641=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
base642=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
base643=RTbmD80QFSOB6h/E9AV4IvEDy0cAxaBS0R8xxidHBzGUTxmYY0UigITIxvwRY7xY/yD24IN2B6VynF4KgCOyMT9k0pyIcump0HHFZgCOdN0xp2L51C8WMV6sdxBTWyRLr5SPJ0KgHFddZXdQqohkqncQIwsrH23zQHnUF01FcPkiurV6jxObPz/x4mQAAGRKDxIaI9tD7yCmAX8Jl4kGACBzfebkCG9O1Kh1AhgAwAd9urfCgxgLYAIAfEEQAwBUVp/ijvAgxiBnAIAvHnnE7gwXXtgxcWLfTwIAoFA9ijvCMzECGADAJz26uYYHMfrDAAC+6bEs2PAgxvphAADf7NpldwYbHsR6/EMAAErTo5uLTAwA4L8eXV3DqxNPPJHZ6wEA/tm/P5gYvcvwTIwABgDwUUg2NjiIUZkIAPBVSL/Y4CDG+DAAgK/27bM7Rw0OYsxcDwDwVUiMGhzEQqIcAABeiAxieWZiKoJ03fIQ9n3iblUQ9r6TbkX2kT71VPh7SLpVRdh7j7sBTRUZxOgTQ7dzzzVm4UJ7kKM//VNjTj3VHgDITdhDUZzNFyHV8/SJob/LL7c7OZo3z+4AQIQhLURHgxgBDGGmTLE7OVEW9qY32QMAiDAkVh0NYjQlIsyxxxrzjW/Ygxy8+912BwBi6BnEDhywO8AQF1xgdzKm/jb1uwFAXEOq6I8GMaabQi/Kxu6+2x5kqIiiEQD10jMTI4ihn3e8w+5khCwMgIshsepoEGOgM/o54QRj1qyxBxkoouoRQP2QicHZ7Nl2JwN5Vz0CqKcXX7Q7AYIY4lM2duut9iAFVTuqnw0AkhpShHg0iFGdiDguusjupJBXtSOAxiETQzIamKwByq7Ur0YWBiCNrn6xY460BHvHtD/kJs38W3m8N9/eT9bynO/s8ceNOeMMe5CQHpbULJmXKvxtpO7nn09uuMGYt73NmFGjjHn964PXes0S89xzwaZ+lyeeMGb7dmP+4A/s/6wB1/POt3Nu82ZjZsxo7wZBTE2JY8a0X8iNbxdt3W8iaX6+OD75SWM+/Wl7EJOysMsuswc5IYhBdK6dd17wsJVF5v/008Y88IAx73uffcFzeV//ceR5nm7YYMysWe3doDlxSLUHEOkDH7A7CWRZ3QiEUdGQ7md6WDrrrOyarrXKwnvfGwSHIpcoQriuGo4giA2puwciJV2mRf1oeTYjotk6weud78y/z1Xnvr5XHrPYIJ6uGo6jhR1AUkmCGMutIA/q79INrYjg1U3fS5nZrl32BRSKIIZMxJ02iuVWkAf1e33qU+Vm+Gqy1KrkKFbX7zwIYpTXo0OVh0nEWaYlSRaW9PujmYooEopL/WVM21esrjoOghgGu/9+uxNT1MBlNTkmycKSfn80j08BrEPneJ7r7qEnmhMx2Pz5wTiZuNQ30O/iTdJvpu+r7w/0omnPfAtgHeqXUx8dCkUQw3D/9E92J6Ze2VjS5VaSfl80i86nD3/YHnjqIx+xOyhKEMQosUc3Deh86SV7EIOyMTXxDJUkC9P3q8pAUpTj+uvdKxB1fm3bZsznPx8M1NdA3O5Nr+n/PfhgsnN/KDUrko0VikwM4TTdThJhA5knTLA7MST9fmgW1wpXBaQ77jBmxAhjpk0z5sorw2ea0Wv6f5MnB/9WwcyVy0QAWRsapDubq7CvFbUVhCCGcLffbndiGrpopvrJkjw1J/1+aBaXcYaaKkoByaWfVcFMmZuLJA9vcDOsOjFN+ox6Wrky+dOoOrY7kiy3ou+j7weEccnCdE9bvNgeOFLmlqTIqUMPbzQp5mvYtFOu7cyot3/4B7sTk8bL6Iaj6XiSnFNJvw+a5d3vtjsJqHk6iwcj12IjzZqPQtCciN60BEXSwcdq9nnHO+xBDPr6dVrqAtlzaZ771rfsTkrf/rbdScil/w5OCGLoL+ngY128SaYBYnAz+lGznEtLUVYPRkmXG+o48US7g7wRxNBf0sHPSTC4GVFcm+W0ZEpWmwtWbCgMQQzRtABdHvL6uqiPqjbLEcTyNXas3SGIIQ5lS1lXsOrrkYUhCs1yiEAQQzxZdZR3ZP31UE9kNIgQBLGu1AwIdddddicjWX891BNBDGE0iN0iE0M8LoOfe2FwM4A0TjvN7hDEkMSXv2x3Usrq6wBoPIIY4tOYmbQrL+vzXcfeAMAQQRAbObL9AYi0aZPdcZT284E4wmZVL3pDfkaPtjtFBrE0Jdqajy9Lab5e0ydL1nIVroOf9Xn6fCAuzUTvggl4621YYUdXVMvNU0/ZHQdnnWV3MnL66XbHQZqfoy5cBykzuBlJdS25kcikSXYHtTQsiHW9kBvXk1HOPtvuZGTiRLvjIM3PURcug58Z3AwXe/bYnYTSXOPw37DmxCLGiT3xhN1xcMYZdicjaRatS/Nz1EnSwcoMboaLH/zA7iR07rl2B7U0LIhJ3tlYmuXnNYu1VgrOglYfTrN+GsvoB5IOVmZwM1yk6UPdutXuoHa64tUxR1rae+PGGbN3b3s3N64zQouaowYG0g+SVXNgmiBWlaoj19+1Dz9fmvOk7n8faVrlm/qhteCqi89/vrhiIj0gX3JJcH/x9W/ket598pN+DY3p+jmOZmJFVCg++qjdcaAT48Yb7YEjXQxpAlia9w/AzT/+o91x8OEPZ1/dPJS+/r59xlx2Wbr7i898Wql6SKwqNoh973t2x5Gexg4fTn5S6t/r81yf5jruvdfuAChMmlUUFFR+//ez647oduutQfDS16/7Ss5JVmvP25BYdbQ5USfKHXe0d3OlYJLFpJ4aP/L97wd9VGGruCpwTZlizFvekj54icY4FRHos+LabEBzYjHS/IxF8uX3qSD0znfaA0e6hjXMI02VrMafzZkTVD/2u4/5eh4q6LoGXM15OnmyPSjRjBnGbN5sD7qD2BVXGHPbbe3dXKndWGl31SjAV6lEnCDmN4JYclk9AIumP1P5fqdQK+xBeOFCY8aPD8ap6savKu6439/X83DXrnTjbpU8qHn3oYcG95EpadD4W/2OOgE+r9/B3LnGrF1rD1rf5uUgtmRJ+j6nuNJ01JZBJ3zWZf55I4j5jSCWnG6UarqrAl/Pwywy2rjy+h0sWGDM6tX2oLtPrMg1xT73uepM36T3uXSpPQBQGmVLaYo8MKgZrrKGzDBVThBTGtqVDnrtr/6Kta8AX7zrXdmta9dEuve6zn3qi661xKScICZFFZKkoffHhLWAX1RcQCBz993v2p2KGjLj0tE+MSmjHbd7gKAv1ISoTLFKhRxD0SfmN/rE0rv7bmPe+1574Bnfz8Msi2R6yet3sHPnoEB2NBOTorMxUaBQiuu65ELW9D70fqocwIAmeN/7gpkkfLl3VEnSsbY+6ZuJzZxpzJYt9qAEqpy54IJysjJlX5qkVm3udUAm5jcysWypRWf27Pyziyi6j6hsf9o0+4LHNFhbM5rkdb/N49xRUcf+/fYgUH4m1k0BRBM7qgKpqM5HfR99P33fugQwoGnUcqLJCNSPXXRmpsClPjrN06j7SBUCmKi/X/PRaghRVYTEqMFBzJexUAomOiF1UujkyDqg6ett2xZ8fX0fghdQDwpmql67+mpj
base644=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
base645=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
base646=dDtZ1tlnBxkWWRYqiCCG+ug0P+7aFQQ2sraj2ZUCVidYsXgkaoQghvpTcFMwU1B77rkg0KnvrS6VkSqu6GxnnDH4WBtQYwQxNJuaITtNkQpqCm6yb9/R1zWurYwCk+6MSZnUaacF+wQp4GUEMcCFsrtewv6fglDUYo4EJSAxghgAoKKM+f+5lUTz9A4uPgAAAABJRU5ErkJggg==</panel_attributes>
    <additional_attributes/>
    <custom_code>//Modify the code below to define the element's behavior.
//
//Example:  Change the line
//  y += printCenter(textline,y);
//to
//  y += 2*printCenter(textline,y);
//and observe the element preview.

try
{
    String base64;
    
    if((base64=getSetting("base64"))!=null)
    {      	  // Restore the image.
        	  StringBuilder buf = new StringBuilder();
			  buf.append(base64);
					
			  int counter = 1;
					
        	  while((base64=getSetting("base64"+counter))!=null)
        	  {
        	  		buf.append(base64);
        	  		counter++;
        	 }
        	  		
        	 byte[] bytes = Base64.getDecoder().decode(buf.toString());
        	 java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(new java.io.ByteArrayInputStream(bytes));
        	 g2.drawImage(image,0,0,width,height,null);
        	 this.repaint();
      }
      else
      {
	        try
	        {    // Load the image.
	        		boolean flag = System.getProperties().containsKey("dialog");

					if(flag)
					{
						return;
					}

	        		System.getProperties().put("dialog","true");
	        		String dir = System.getProperties().getProperty("dir");

					try
					{
					    Thread.sleep(600);
					}
					catch(InterruptedException ex)
					{
					    Thread.currentThread().interrupt();
					}
	        		
					javax.swing.JFileChooser jfc = new javax.swing.JFileChooser(dir!=null ? new java.io.File(dir) : new java.io.File(System.getProperty("user.dir")));
		        	jfc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
		        	jfc.setMultiSelectionEnabled(false);
		        	jfc.setDialogTitle("Choose an image to upload: ");
					jfc.setAcceptAllFileFilterUsed(false);
					javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter("PNG, GIF, JPEG, and JPG images", "png", "gif", "jpeg", "jpg");
					jfc.addChoosableFileFilter(filter);
		        	
		        	int returnValue = jfc.showOpenDialog(this);
		
		        if(returnValue==javax.swing.JFileChooser.APPROVE_OPTION)
		        {
                  System.getProperties().remove("dialog");
                  System.getProperties().put("dir",jfc.getCurrentDirectory().getPath());
		            java.io.File selectedFile = jfc.getSelectedFile();

						// Embed the image.
			      	byte[] bytes = java.nio.file.Files.readAllBytes(selectedFile.toPath());
			      	String base64String = Base64.getEncoder().encodeToString(bytes);
						int counter = 0;
							  
				       while(!base64String.isEmpty())
					    {
					        if(base64String.length()&gt;3600)
					        {
					            String temp = base64String.substring(0,3600);
					            setProperty("base64"+(counter&gt;0 ? counter : ""),temp);
					            base64String = base64String.substring(3600);
					            counter++;
					        }
					        else
					        {
					            setProperty("base64"+(counter&gt;0 ? counter : ""),base64String);
					                    
					            break;
					        }
					    }
                    
                    try
                    {
    		            	java.awt.image.BufferedImage image = javax.imageio.ImageIO.read(selectedFile);
    		            	g2.drawImage(image,0,0,width,height,null);
    		            	this.repaint();

    		            	// For some reason, that text only works to refresh the pane.
    		            	printCenter("Image can't be loaded.",textHeight());
                    }
                    catch(Exception ex)
                    {
	        	        		printCenter("Image can't be loaded.",textHeight());
                    }					
		        }
	        }
	        catch(Exception ex)
	        {
	        		printCenter("Image can't be loaded.",textHeight());
	        }
    }
        
    String flag;
           
	 if((flag=getSetting("frame"))!=null &amp;&amp; flag.trim().equals("true"))
    {
        drawRectangle(0,0,width,height);
    }
}
catch(Exception e)
{
}</custom_code>
  </element>
</diagram>
